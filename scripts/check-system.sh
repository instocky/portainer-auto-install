#!/bin/bash

# =============================================================================
# System Check Script for Portainer Installation
# Description: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã –∫ —É—Å—Ç–∞–Ω–æ–≤–∫–µ Portainer
# =============================================================================

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

log_info() {
    echo -e "${GREEN}[‚úì]${NC} $1"
}

log_warn() {
    echo -e "${YELLOW}[!]${NC} $1"
}

log_error() {
    echo -e "${RED}[‚úó]${NC} $1"
}

log_check() {
    echo -e "${BLUE}[?]${NC} $1"
}

# –°—á–µ—Ç—á–∏–∫–∏
PASS=0
WARN=0
FAIL=0

check_result() {
    case $1 in
        "pass") ((PASS++)) ;;
        "warn") ((WARN++)) ;;
        "fail") ((FAIL++)) ;;
    esac
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
check_os() {
    echo "=== –û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ ==="
    
    if grep -q "Ubuntu" /etc/os-release; then
        VERSION=$(lsb_release -rs 2>/dev/null || echo "unknown")
        log_info "Ubuntu $VERSION –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞"
        
        if [[ "$VERSION" == "24.04" ]]; then
            log_info "–í–µ—Ä—Å–∏—è Ubuntu –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è"
            check_result "pass"
        elif [[ $(echo "$VERSION >= 20.04" | bc -l 2>/dev/null || echo "0") -eq 1 ]]; then
            log_warn "Ubuntu $VERSION –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è, –Ω–æ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è 24.04"
            check_result "warn"
        else
            log_error "Ubuntu $VERSION –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ—Å–æ–≤–º–µ—Å—Ç–∏–º–∞"
            check_result "fail"
        fi
    else
        log_error "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ Ubuntu"
        check_result "fail"
    fi
    echo
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
check_architecture() {
    echo "=== –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Å–∏—Å—Ç–µ–º—ã ==="
    
    ARCH=$(uname -m)
    case $ARCH in
        "x86_64"|"amd64")
            log_info "–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: $ARCH (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è)"
            check_result "pass"
            ;;
        "aarch64"|"arm64")
            log_warn "–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: $ARCH (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è, –Ω–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–¥–ª–µ–Ω–Ω–µ–µ)"
            check_result "warn"
            ;;
        *)
            log_error "–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: $ARCH (–Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è)"
            check_result "fail"
            ;;
    esac
    echo
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
check_resources() {
    echo "=== –°–∏—Å—Ç–µ–º–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã ==="
    
    # –ü–∞–º—è—Ç—å
    MEMORY_GB=$(free -g | awk '/^Mem:/{print $2}')
    MEMORY_MB=$(free -m | awk '/^Mem:/{print $2}')
    
    if [[ $MEMORY_GB -ge 2 ]]; then
        log_info "–ü–∞–º—è—Ç—å: ${MEMORY_GB}GB (–æ—Ç–ª–∏—á–Ω–æ)"
        check_result "pass"
    elif [[ $MEMORY_GB -ge 1 ]]; then
        log_warn "–ü–∞–º—è—Ç—å: ${MEMORY_GB}GB (–º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è)"
        check_result "warn"
    else
        log_error "–ü–∞–º—è—Ç—å: ${MEMORY_MB}MB (–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, —Ç—Ä–µ–±—É–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º 1GB)"
        check_result "fail"
    fi
    
    # –î–∏—Å–∫
    DISK_AVAILABLE=$(df / | awk 'NR==2 {print int($4/1024/1024)}')
    if [[ $DISK_AVAILABLE -ge 10 ]]; then
        log_info "–°–≤–æ–±–æ–¥–Ω–æ–µ –º–µ—Å—Ç–æ: ${DISK_AVAILABLE}GB (–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ)"
        check_result "pass"
    elif [[ $DISK_AVAILABLE -ge 5 ]]; then
        log_warn "–°–≤–æ–±–æ–¥–Ω–æ–µ –º–µ—Å—Ç–æ: ${DISK_AVAILABLE}GB (–º–∏–Ω–∏–º–∞–ª—å–Ω–æ)"
        check_result "warn"
    else
        log_error "–°–≤–æ–±–æ–¥–Ω–æ–µ –º–µ—Å—Ç–æ: ${DISK_AVAILABLE}GB (–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ)"
        check_result "fail"
    fi
    
    # CPU
    CPU_CORES=$(nproc)
    if [[ $CPU_CORES -ge 2 ]]; then
        log_info "CPU —è–¥–µ—Ä: $CPU_CORES (—Ö–æ—Ä–æ—à–æ)"
        check_result "pass"
    else
        log_warn "CPU —è–¥–µ—Ä: $CPU_CORES (–±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –º–µ–¥–ª–µ–Ω–Ω–æ)"
        check_result "warn"
    fi
    echo
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ç–∏
check_network() {
    echo "=== –°–µ—Ç–µ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ ==="
    
    # –ò–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    if ping -c 1 8.8.8.8 &>/dev/null; then
        log_info "–ò–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ"
        check_result "pass"
    else
        log_error "–ù–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"
        check_result "fail"
    fi
    
    # DNS
    if nslookup docker.com &>/dev/null; then
        log_info "DNS —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"
        check_result "pass"
    else
        log_error "–ü—Ä–æ–±–ª–µ–º—ã —Å DNS —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º"
        check_result "fail"
    fi
    
    # –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Docker —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
    if curl -s --max-time 5 https://download.docker.com &>/dev/null; then
        log_info "Docker —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –¥–æ—Å—Ç—É–ø–µ–Ω"
        check_result "pass"
    else
        log_warn "–ü—Ä–æ–±–ª–µ–º—ã —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ Docker —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—é"
        check_result "warn"
    fi
    echo
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤
check_permissions() {
    echo "=== –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ ==="
    
    if [[ $EUID -eq 0 ]]; then
        log_info "–ó–∞–ø—É—â–µ–Ω–æ —Å –ø—Ä–∞–≤–∞–º–∏ root"
        check_result "pass"
    elif groups | grep -q sudo; then
        log_warn "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –≥—Ä—É–ø–ø–µ sudo (–ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è sudo –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏)"
        check_result "warn"
    else
        log_error "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏"
        check_result "fail"
    fi
    echo
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —É—Å—Ç–∞–Ω–æ–≤–æ–∫
check_existing() {
    echo "=== –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ ==="
    
    # Docker
    if command -v docker &>/dev/null; then
        DOCKER_VERSION=$(docker --version 2>/dev/null | cut -d' ' -f3 | tr -d ',')
        log_warn "Docker —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: $DOCKER_VERSION"
        check_result "warn"
    else
        log_info "Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω)"
        check_result "pass"
    fi
    
    # Portainer
    if docker ps -a 2>/dev/null | grep -q portainer; then
        log_warn "Portainer —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        check_result "warn"
    else
        log_info "Portainer –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω)"
        check_result "pass"
    fi
    
    # UFW
    if command -v ufw &>/dev/null; then
        UFW_STATUS=$(ufw status 2>/dev/null | head -n1)
        log_info "UFW —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: $UFW_STATUS"
        check_result "pass"
    else
        log_info "UFW –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω)"
        check_result "pass"
    fi
    echo
}

# –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
show_summary() {
    echo "========================================="
    echo "üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –ü–†–û–í–ï–†–ö–ò –°–ò–°–¢–ï–ú–´"
    echo "========================================="
    echo ""
    echo "‚úÖ –£—Å–ø–µ—à–Ω–æ:     $PASS –ø—Ä–æ–≤–µ—Ä–æ–∫"
    echo "‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: $WARN –ø—Ä–æ–≤–µ—Ä–æ–∫"
    echo "‚ùå –û—à–∏–±–∫–∏:      $FAIL –ø—Ä–æ–≤–µ—Ä–æ–∫"
    echo ""
    
    if [[ $FAIL -eq 0 ]]; then
        echo -e "${GREEN}üéâ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —É—Å—Ç–∞–Ω–æ–≤–∫–µ Portainer!${NC}"
        echo ""
        echo "–î–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:"
        echo "curl -sSL https://raw.githubusercontent.com/USERNAME/portainer-auto-install/main/install.sh | sudo bash"
    elif [[ $FAIL -le 2 && $WARN -le 3 ]]; then
        echo -e "${YELLOW}‚ö†Ô∏è  –°–∏—Å—Ç–µ–º–∞ –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å, –Ω–æ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã${NC}"
        echo "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É—Å—Ç—Ä–∞–Ω–∏—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –ø–µ—Ä–µ–¥ —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π"
    else
        echo -e "${RED}‚ùå –°–∏—Å—Ç–µ–º–∞ –Ω–µ –≥–æ—Ç–æ–≤–∞ –∫ —É—Å—Ç–∞–Ω–æ–≤–∫–µ${NC}"
        echo "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç—Ä–∞–Ω–∏—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏"
    fi
    echo ""
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    echo "========================================="
    echo "üîç –ü–†–û–í–ï–†–ö–ê –ì–û–¢–û–í–ù–û–°–¢–ò –°–ò–°–¢–ï–ú–´"
    echo "========================================="
    echo "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Portainer"
    echo ""
    
    check_os
    check_architecture
    check_resources
    check_network
    check_permissions
    check_existing
    show_summary
}

main "$@"
